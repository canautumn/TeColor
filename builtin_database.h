//
// Created by Can on 9/1/15.
//

#ifndef TECOLOR_BUILTIN_DATABASE_H
#define TECOLOR_BUILTIN_DATABASE_H

#include <vector>
#include "typedefs.h"

namespace tecolor {

namespace detail {

const Index CMF_1931_2DEG_NUM_SAMPLES = 81;

const std::vector<Value> CMF_1931_2DEG_WAVELENGTHS = {
    380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490,
    495, 500, 505, 510, 515, 520, 525, 530, 535, 540, 545, 550, 555, 560, 565, 570, 575, 580, 585, 590, 595, 600, 605,
    610, 615, 620, 625, 630, 635, 640, 645, 650, 655, 660, 665, 670, 675, 680, 685, 690, 695, 700, 705, 710, 715, 720,
    725, 730, 735, 740, 745, 750, 755, 760, 765, 770, 775, 780
};

const std::vector<std::vector<Value>> CMF_1931_2DEG = {
    std::vector<Value>({
                           0.00137, 0.00224, 0.00424, 0.00765, 0.01431, 0.02319, 0.04351, 0.07763, 0.13438, 0.21477,
                           0.28390, 0.32850, 0.34828, 0.34806, 0.33620, 0.31870, 0.29080, 0.25110, 0.19536, 0.14210,
                           0.09564, 0.05795, 0.03201, 0.01470, 0.00490, 0.00240, 0.00930, 0.02910, 0.06327, 0.10960,
                           0.16550, 0.22575, 0.29040, 0.35970, 0.43345, 0.51205, 0.59450, 0.67840, 0.76210, 0.84250,
                           0.91630, 0.97860, 1.02630, 1.05670, 1.06220, 1.04560, 1.00260, 0.93840, 0.85445, 0.75140,
                           0.64240, 0.54190, 0.44790, 0.36080, 0.28350, 0.21870, 0.16490, 0.12120, 0.08740, 0.06360,
                           0.04677, 0.03290, 0.02270, 0.01584, 0.01136, 0.00811, 0.00579, 0.00411, 0.00290, 0.00205,
                           0.00144, 0.00100, 0.00069, 0.00048, 0.00033, 0.00023, 0.00017, 0.00012, 0.00008, 0.00006,
                           0.00004
                       }),
    std::vector<Value>({
                           0.00004, 0.00006, 0.00012, 0.00022, 0.00040, 0.00064, 0.00121, 0.00218, 0.00400, 0.00730,
                           0.01160, 0.01684, 0.02300, 0.02980, 0.03800, 0.04800, 0.06000, 0.07390, 0.09098, 0.11260,
                           0.13902, 0.16930, 0.20802, 0.25860, 0.32300, 0.40730, 0.50300, 0.60820, 0.71000, 0.79320,
                           0.86200, 0.91485, 0.95400, 0.98030, 0.99495, 1.00000, 0.99500, 0.97860, 0.95200, 0.91540,
                           0.87000, 0.81630, 0.75700, 0.69490, 0.63100, 0.56680, 0.50300, 0.44120, 0.38100, 0.32100,
                           0.26500, 0.21700, 0.17500, 0.13820, 0.10700, 0.08160, 0.06100, 0.04458, 0.03200, 0.02320,
                           0.01700, 0.01192, 0.00821, 0.00572, 0.00410, 0.00293, 0.00209, 0.00148, 0.00105, 0.00074,
                           0.00052, 0.00036, 0.00025, 0.00017, 0.00012, 0.00008, 0.00006, 0.00004, 0.00003, 0.00002,
                           0.00001
                       }),
    std::vector<Value>({
                           0.00645, 0.01055, 0.02005, 0.03621, 0.06785, 0.11020, 0.20740, 0.37130, 0.64560, 1.03905,
                           1.38560, 1.62296, 1.74706, 1.78260, 1.77211, 1.74410, 1.66920, 1.52810, 1.28764, 1.04190,
                           0.81295, 0.61620, 0.46518, 0.35330, 0.27200, 0.21230, 0.15820, 0.11170, 0.07825, 0.05725,
                           0.04216, 0.02984, 0.02030, 0.01340, 0.00875, 0.00575, 0.00390, 0.00275, 0.00210, 0.00180,
                           0.00165, 0.00140, 0.00110, 0.00100, 0.00080, 0.00060, 0.00034, 0.00024, 0.00019, 0.00010,
                           0.00005, 0.00003, 0.00002, 0.00001, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                           0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                           0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
                           0.00000
                       })
};

const Index ILL_D65_NUM_SAMPLES = 81;

const std::vector<Value> ILL_D65_WAVELENGTHS = CMF_1931_2DEG_WAVELENGTHS;

const std::vector<Value> ILL_D65_SPECTRUM = {
    49.9755, 52.3118, 54.6482, 68.7015, 82.7549, 87.1204, 91.486, 92.4589, 93.4318, 90.057, 86.6823, 95.7736, 104.865,
    110.936, 117.008, 117.41, 117.812, 116.336, 114.861, 115.392, 115.923, 112.367, 108.811, 109.082, 109.354, 108.578,
    107.802, 106.296, 104.79, 106.239, 107.689, 106.047, 104.405, 104.225, 104.046, 102.023, 100, 98.1671, 96.3342,
    96.0611, 95.788, 92.2368, 88.6856, 89.3459, 90.0062, 89.8026, 89.5991, 88.6489, 87.6987, 85.4936, 83.2886, 83.4939,
    83.6992, 81.863, 80.0268, 80.1207, 80.2146, 81.2462, 82.2778, 80.281, 78.2842, 74.0027, 69.7213, 70.6652, 71.6091,
    72.979, 74.349, 67.9765, 61.604, 65.7448, 69.8856, 72.4863, 75.087, 69.3398, 63.5927, 55.0054, 46.4182, 56.6118,
    66.8054, 65.0941, 63.3828
};

} // namespace detail

} // namespace tecolor

#endif //TECOLOR_BUILTIN_DATABASE_H
